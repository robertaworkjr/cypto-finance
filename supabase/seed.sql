-- Create tables
CREATE TABLE IF NOT EXISTS public.posts (
    id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    title TEXT NOT NULL,
    content JSONB NOT NULL,
    category TEXT NOT NULL,
    author TEXT NOT NULL,
    image_url TEXT,
    likes INTEGER DEFAULT 0,
    created_at TIMESTAMP WITH TIME ZONE DEFAULT timezone('utc'::text, now()) NOT NULL
);

CREATE TABLE IF NOT EXISTS public.comments (
    id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    post_id BIGINT REFERENCES public.posts(id) ON DELETE CASCADE,
    author TEXT NOT NULL,
    content TEXT NOT NULL,
    created_at TIMESTAMP WITH TIME ZONE DEFAULT timezone('utc'::text, now()) NOT NULL
);

-- Create RLS policies
ALTER TABLE public.posts ENABLE ROW LEVEL SECURITY;
ALTER TABLE public.comments ENABLE ROW LEVEL SECURITY;

-- Allow public read access
CREATE POLICY "Allow public read access on posts" ON public.posts
    FOR SELECT USING (true);

CREATE POLICY "Allow public read access on comments" ON public.comments
    FOR SELECT USING (true);

-- Allow authenticated users to create posts
CREATE POLICY "Allow authenticated create posts" ON public.posts
    FOR INSERT WITH CHECK (auth.role() = 'authenticated');

-- Allow authenticated users to create comments
CREATE POLICY "Allow authenticated create comments" ON public.comments
    FOR INSERT WITH CHECK (auth.role() = 'authenticated');

-- Create functions
CREATE OR REPLACE FUNCTION increment_likes(post_id BIGINT)
RETURNS void AS $$
BEGIN
  UPDATE posts
  SET likes = likes + 1
  WHERE id = post_id;
END;
$$ LANGUAGE plpgsql;
